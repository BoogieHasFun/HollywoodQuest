name: NDK build

env:
  module_id: hollywood
  qmodName: hollywood
  cache-name: hollywood_cache

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        name: Checkout
        with:
          submodules: true
          lfs: true

      - uses: seanmiddleditch/gha-setup-ninja@v3

      - name: Create ndkpath.txt
        run: |
          echo "$ANDROID_NDK_LATEST_HOME" > ${GITHUB_WORKSPACE}/ndkpath.txt
          cat ${GITHUB_WORKSPACE}/ndkpath.txt

      - name: QPM Rust Action
        uses: Fernthedev/qpm-rust-action@main
        with:
          #required
          workflow_token: ${{secrets.GITHUB_TOKEN}}

          restore: true # will run restore on download
          cache: true #will cache dependencies

          publish: false # Will publish the package at the end of the action run

      - name: List Post Restore
        run: |
          echo includes:
          ls -la ${GITHUB_WORKSPACE}/extern/includes
          echo libs:
          ls -la ${GITHUB_WORKSPACE}/extern/libs
          echo cache:
          ls -la $HOME/.local/share/QPM-Rust/cache

      - name: Cache FFMPEG
        id: cache-ffmpeg
        uses: actions/cache@v3
        with:
          path: ffmpeg
          key: ${{ hashFiles('**/update_ffmpeg.py') }}

      - name: Get FFMPEG
        if: steps.cache-ffmpeg.outputs.cache-hit != 'true'
        run: |
          cd ${GITHUB_WORKSPACE}
          pip install PyGithub
          pip install requests
          python3 ./update_ffmpeg.py

      - name: Build
        run: |
          cd ${GITHUB_WORKSPACE}
          pwsh -Command ./build.ps1
          qpm-rust qmod build

      - name: Create Qmod
        run: |
          pwsh -Command ./buildQMOD.ps1 ${{env.qmodName}}

      - name: Get Library Name
        id: libname
        run: |
          cd ./build/
          pattern="lib${module_id}*.so"
          files=( $pattern )
          echo ::set-output name=NAME::"${files[0]}"
      - name: Upload non-debug artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.libname.outputs.NAME }}
          path: ./build/${{ steps.libname.outputs.NAME }}
          if-no-files-found: error

      - name: Upload qmod artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{env.qmodName}}.qmod
          path: ./${{ env.qmodName }}.qmod
          if-no-files-found: error
